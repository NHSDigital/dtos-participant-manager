services:
  migrations:
    container_name: "migrations"
    build:
      context: ./src/api/ParticipantManager.API
      dockerfile: Dockerfile.migrations
    environment:
      ConnectionStrings:ParticipantManagerDatabase: "Server=${DATABASE_HOST};Database=${DATABASE_NAME};User Id=${DATABASE_USER};Password=${DATABASE_PASSWORD};TrustServerCertificate=True"
    platform: linux/amd64
    depends_on:
      sqlserver:
        condition: service_healthy
    networks:
      - backend

  ### ✅ SQL Database ###
  sqlserver:
    container_name: "participant_database"
    image: "mcr.microsoft.com/mssql/server:latest"
    restart: always
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: "${DATABASE_PASSWORD}"
      MSSQL_PID: "Express"
    deploy:
      resources:
        limits:
          memory: "4g"
    ports:
      - "${DATABASE_PORT}:1433"
    healthcheck:
      # Test if the SQL server is available without using any credentials.
      test: timeout 1 bash -c 'cat < /dev/null > /dev/tcp/127.0.0.1/1433'
    networks:
      - backend
    platform: linux/amd64

  ### ✅ API Backend (Azure Functions in .NET 9) ###
  api:
    container_name: "api-backend"
    build:
      context: ./src/api/ParticipantManager.API # Path to the API Dockerfile
      dockerfile: Dockerfile
      args:
        FUNCTION_KEY_API: "${FUNCTION_KEY_API}"
    platform: linux/amd64
    restart: always
    environment:
      FUNCTIONS_WORKER_RUNTIME: "dotnet-isolated"
      AzureWebJobsStorage: "${AZURE_WEB_JOBS_STORAGE}"
      AzureWebJobsSecretStorageType: "files" # looks for secrets under /azure-functions-host/Secrets/
      ConnectionStrings:ParticipantManagerDatabase: "Server=${DATABASE_HOST};Database=${DATABASE_NAME};User Id=${DATABASE_USER};Password=${DATABASE_PASSWORD};TrustServerCertificate=True"
    depends_on:
      sqlserver:
        condition: service_healthy
    ports:
      - "${API_PORT}:80"
    networks:
      - backend

  ### ✅ Next.js Frontend ###
  frontend:
    container_name: "nextjs-frontend"
    build:
      context: ./src/web # Path to the Next.js project Dockerfile
      dockerfile: Dockerfile
      target: builder # Use builder stage for development
    restart: always
    platform: linux/amd64
    volumes:
      - ./src/web:/app # Mount source code
      - /app/node_modules # Preserve node_modules
      - /app/.next # Preserve Next.js build
    environment:
      - NODE_ENV=development
      - WATCHPACK_POLLING=true # Enable polling for hot reload
    command: npm run dev:secure # Run in development mode
    depends_on:
      - api
    ports:
      - "${WEB_PORT}:3000"
    networks:
      - backend

networks:
  backend:
    driver: bridge
