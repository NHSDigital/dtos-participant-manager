services:
  ### ✅ API Backend (Azure Functions in .NET 9) ###
  backend-api:
    container_name: "backend-api"
    build:
      context: ./src/api
      dockerfile: ParticipantManager.API/Dockerfile
    platform: linux/amd64
    restart: always
    environment:
      FUNCTIONS_WORKER_RUNTIME: "dotnet-isolated"
      AzureWebJobsStorage: "${AZURE_WEB_JOBS_STORAGE}"
      AzureWebJobsSecretStorageType: "files"
      ParticipantManagerDatabaseConnectionString: "Server=db;Database=participant_database;User Id=sa;Password=${DATABASE_PASSWORD};TrustServerCertificate=True"
      APPLICATIONINSIGHTS_CONNECTION_STRING: "${APPLICATIONINSIGHTS_CONNECTION_STRING}"
    ports:
      - "${API_PORT}:80"
    networks:
      - backend

  ### ✅ Experience API (Azure Functions in .NET 9) ###
  experience-api:
    container_name: "experience-api"
    build:
      context: ./src/api
      dockerfile: ParticipantManager.Experience.API/Dockerfile
    platform: linux/amd64
    restart: always
    environment:
      FUNCTIONS_WORKER_RUNTIME: "dotnet-isolated"
      AzureWebJobsStorage: "${AZURE_WEB_JOBS_STORAGE}"
      AzureWebJobsSecretStorageType: "files"
      CRUD_API_URL: "http://backend-api"
      AUTH_NHSLOGIN_ISSUER_URL: "${AUTH_NHSLOGIN_ISSUER_URL}"
      AUTH_NHSLOGIN_CLIENT_ID: "${AUTH_NHSLOGIN_CLIENT_ID}"
      APPLICATIONINSIGHTS_CONNECTION_STRING: "${APPLICATIONINSIGHTS_CONNECTION_STRING}"
      FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY: ${FLAGSMITH_SERVER_SIDE_ENVIRONMENT_KEY}
    ports:
      - "${EXPERIENCE_PORT}:80"
    networks:
      - backend

  ### ✅ Event Handler (Azure Functions in .NET 9) ###
  event-handler:
    container_name: "event-handler"
    build:
      context: ./src/api
      dockerfile: ParticipantManager.EventHandler/Dockerfile
    platform: linux/amd64
    restart: always
    environment:
      FUNCTIONS_WORKER_RUNTIME: "dotnet-isolated"
      AzureWebJobsStorage: "${AZURE_WEB_JOBS_STORAGE}"
      AzureWebJobsSecretStorageType: "files"
      CRUD_API_URL: "http://backend-api"
      APPLICATIONINSIGHTS_CONNECTION_STRING: "${APPLICATIONINSIGHTS_CONNECTION_STRING}"
      EVENT_GRID_TOPIC_URL: "${EVENT_GRID_TOPIC_URL}"
      EVENT_GRID_TOPIC_KEY: "${EVENT_GRID_TOPIC_KEY}"
    ports:
      - "${EVENT_HANDLER_PORT}:80"
    networks:
      - backend

  ### ✅ Next.js Frontend ###
  nextjs-frontend:
    container_name: "nextjs-frontend"
    build:
      context: ./src/web
      dockerfile: Dockerfile
    platform: linux/amd64
    restart: always
    environment:
      SERVICE_NAME: Manage your screening
      NEXTAUTH_URL: https://localhost:${WEB_PORT}/api/auth
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      AUTH_TRUST_HOST: true
      EXPERIENCE_API_URL: http://experience-api
      AUTH_NHSLOGIN_ISSUER_URL: https://auth.sandpit.signin.nhs.uk
      AUTH_NHS_LOGIN_SETTINGS_URL: https://settings.sandpit.signin.nhs.uk
      AUTH_NHSLOGIN_CLIENT_ID: ${AUTH_NHSLOGIN_CLIENT_ID}
      AUTH_NHSLOGIN_CLIENT_SECRET: ${AUTH_NHSLOGIN_CLIENT_SECRET}
      APPLICATIONINSIGHTS_CONNECTION_STRING: ${APPLICATIONINSIGHTS_CONNECTION_STRING}
    depends_on:
      - experience-api
    ports:
      - "${WEB_PORT}:3000"
    networks:
      - backend

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    command:
      - "start-dev"
      - "--import-realm"
      - "--https-certificate-file=/etc/x509/https/keycloak.crt.pem"
      - "--https-certificate-key-file=/etc/x509/https/keycloak.key.pem"
      - "--https-port=8443"
    ports:
      - "8443:8443"
    volumes:
      - ./keycloak-config/master-realm.json:/opt/keycloak/data/import/master-realm.json
      - ./keycloak-config/keycloak-cert.pem:/etc/x509/https/keycloak.crt.pem
      - ./keycloak-config/keycloak-key.pem:/etc/x509/https/keycloak.key.pem

  ### ✅ SQL Server ###
  db:
    container_name: db
    image: mcr.microsoft.com/mssql/server:2022-latest
    ports:
      - "1433:1433"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "grep -q 'SQL Server is now ready for client connections' /var/opt/mssql/log/errorlog || exit 1",
        ]
      interval: 15s
      timeout: 10s
      retries: 6
      start_period: 30s
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: "${DATABASE_PASSWORD}"
    networks:
      - backend

  ### ✅ Run EF migrations and seed db ###
  db-migrations:
    container_name: db-migrations
    build:
      context: .
      dockerfile: src/api/ParticipantManager.API/Dockerfile.migrations
      args:
        ParticipantManagerDatabaseConnectionString: "Server=db;Database=participant_database;User Id=sa;Password=${DATABASE_PASSWORD};TrustServerCertificate=True"
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_PASSWORD: "${DATABASE_PASSWORD}"
    networks:
      - backend

networks:
  backend:
    driver: bridge
