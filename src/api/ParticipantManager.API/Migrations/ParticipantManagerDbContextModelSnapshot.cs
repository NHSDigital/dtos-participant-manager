// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ParticipantManager.API.Data;

#nullable disable

namespace ParticipantManager.API.Migrations
{
    [DbContext(typeof(ParticipantManagerDbContext))]
    partial class ParticipantManagerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ParticipantManager.API.Models.Episode", b =>
                {
                    b.Property<Guid>("EpisodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EnrolmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PathwayTypeEnrolmentEnrolmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("PathwayVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EpisodeId");

                    b.HasIndex("PathwayTypeEnrolmentEnrolmentId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("ParticipantManager.API.Models.Participant", b =>
                {
                    b.Property<Guid>("ParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NhsNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ParticipantId");

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("ParticipantManager.API.Models.PathwayTypeEnrolment", b =>
                {
                    b.Property<Guid>("EnrolmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EnrolmentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LapsedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("NextActionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ParticipantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PathwayTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("PathwayTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ScreeningName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EnrolmentId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("PathwayTypeEnrolments");
                });

            modelBuilder.Entity("ParticipantManager.API.Models.Episode", b =>
                {
                    b.HasOne("ParticipantManager.API.Models.PathwayTypeEnrolment", "PathwayTypeEnrolment")
                        .WithMany("Episodes")
                        .HasForeignKey("PathwayTypeEnrolmentEnrolmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PathwayTypeEnrolment");
                });

            modelBuilder.Entity("ParticipantManager.API.Models.PathwayTypeEnrolment", b =>
                {
                    b.HasOne("ParticipantManager.API.Models.Participant", "Participant")
                        .WithMany("PathwayTypeEnrolments")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("ParticipantManager.API.Models.Participant", b =>
                {
                    b.Navigation("PathwayTypeEnrolments");
                });

            modelBuilder.Entity("ParticipantManager.API.Models.PathwayTypeEnrolment", b =>
                {
                    b.Navigation("Episodes");
                });
#pragma warning restore 612, 618
        }
    }
}
